Vue.js 專題架構  增加物件重新整理不會消失任務管理系統網站

網址: https://bejewelled-crepe-9fc596.netlify.app/

專題主要功能模組
前端框架：Vue 3 + Vite
樣式框架：Tailwind CSS
主要功能：新增、編輯、刪除、搜尋物件
資料存放：前端暫存 (可延伸串接後端 API)
介面設計：卡片式彩色 UI，支援自動換行

專案目錄：
src/
 ├── App.vue (主介面)
 ├── main.js (入口檔案)
 ├── main.css 
 ├── store.js 
 ├── assets/ (資源資料夾)
 ├── components/
      ├── ObjectList.vue (物件清單/新增/編輯表單)
 ├── styles.css (Tailwind 設定)


核心功能：
物件新增：輸入名稱與描述
物件編輯：修改既有物件資訊
物件刪除：移除指定物件
物件搜尋：依名稱即時篩選
介面美化：彩色卡片，自動換行，限制行數

------------------------------------------------------------------------

專題需求設定

假設你的專題是「物件管理系統」，功能需求可以先簡單定義：

顯示物件列表

新增物件

編輯物件

刪除物件

可以存資料到本地（初期使用 LocalStorage 模擬資料庫）


- id (自動產生)
- 名稱
- 類別
- 描述
- 數量

步驟 1：建立專案

安裝 Node.js（建議 18 以上）

開啟終端機，建立 Vue 3 專案：


npm create vite@latest vue-object-project

選擇：

Project name: vue-object-project

Framework: Vue

yes

yes

Variant: Vue 3 + JavaScript（或 TypeScript）

進入資料夾並安裝套件：

cd vue-object-project
npm install

npm run dev

打開瀏覽器，應該可以看到 Vite 的預設頁面。



建議用 Tailwind CSS 做前端樣式快速美化，並加上：

卡片列表或漂亮表格

搜尋/篩選物件

分頁（可選，資料少可以先不做）

按鈕、表單樣式美化

簡單顏色、間距調整

npm install -D tailwindcss @tailwindcss/postcss postcss
npm install -D tailwindcss postcss autoprefixer
npm install -D tailwindcss@latest @tailwindcss/postcss@latest postcss@latest autoprefixer@latest

會生成：

tailwind.config.js

postcss.config.js

----------------------------------------------------------
在 src/main.css（如果沒有就新建）：

@tailwind base;
@tailwind components;
@tailwind utilities;

----------------------------------------------------------

src/main.js

import { createApp } from "vue";
import App from "./App.vue";
import "./main.css";

createApp(App).mount("#app");


----------------------------------------------------------

style.css

:root {
  font-family: system-ui, Avenir, Helvetica, Arial, sans-serif;
  line-height: 1.5;
  font-weight: 400;

  color-scheme: light dark;
  color: rgba(255, 255, 255, 0.87);
  background-color: #242424;

  font-synthesis: none;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

a {
  font-weight: 500;
  color: #646cff;
  text-decoration: inherit;
}
a:hover {
  color: #535bf2;
}

body {
  margin: 0;
  display: flex;
  place-items: center;
  min-width: 320px;
  min-height: 100vh;
}

h1 {
  font-size: 3.2em;
  line-height: 1.1;
}

button {
  border-radius: 8px;
  border: 1px solid transparent;
  padding: 0.6em 1.2em;
  font-size: 1em;
  font-weight: 500;
  font-family: inherit;
  background-color: #1a1a1a;
  cursor: pointer;
  transition: border-color 0.25s;
}
button:hover {
  border-color: #646cff;
}
button:focus,
button:focus-visible {
  outline: 4px auto -webkit-focus-ring-color;
}

.card {
  padding: 2em;
}

#app {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

@media (prefers-color-scheme: light) {
  :root {
    color: #213547;
    background-color: #ffffff;
  }
  a:hover {
    color: #747bff;
  }
  button {
    background-color: #f9f9f9;
  }
}



---------------------------------------------------------

vite.config.js

import { defineConfig } from 'vite'
import vue from '@vitejs/plugin-vue'

// https://vite.dev/config/
export default defineConfig({
  plugins: [vue()],
})

----------------------------------------------------------


src/store.js

import { reactive } from "vue";

export const store = reactive({
  objects: JSON.parse(localStorage.getItem("objects")) || [],

  addObject(obj) {
    obj.id = Date.now();
    this.objects.push(obj);
    this.save();
  },

  updateObject(updatedObj) {
    const index = this.objects.findIndex((o) => o.id === updatedObj.id);
    if (index !== -1) {
      this.objects[index] = updatedObj;
      this.save();
    }
  },

  deleteObject(id) {
    this.objects = this.objects.filter((o) => o.id !== id);
    this.save();
  },

  save() {
    localStorage.setItem("objects", JSON.stringify(this.objects));
  },
});


----------------------------------------------------------
App.vue

<template>
  <div id="app">
    <ObjectList />
  </div>
</template>

<script>
import ObjectList from './components/ObjectList.vue'

export default {
  components: { ObjectList }
}
</script>

<style>
/* 全域背景美化 */
#app {
  min-height: 100vh;
  display: flex;
  justify-content: center;
  align-items: flex-start;
  padding: 30px;
  background: linear-gradient(135deg, #74ebd5, #acb6e5);
  font-family: "Microsoft JhengHei", sans-serif;
}
</style>



---------------------------------------------------


ObjectList.vue

<template>
  <div class="list-card">
    <h2 class="title">📦 任務排程列表</h2>

    <!-- 新增區塊 -->
    <div class="form-row">
      <input v-model="newName" type="text" placeholder="輸入任務名稱" class="input" />
      <input v-model="newDesc" type="text" placeholder="輸入描述" class="input" />
      <input v-model="newDate" type="date" class="input" />
      <input v-model="newTime" type="time" class="input" />
      <button @click="addObject" class="btn add">➕ 新增</button>
    </div>

    <!-- 物件列表 -->
    <ul>
      <li v-for="(obj, index) in objects" :key="obj.id" class="item">
        <div class="item-info">
          <template v-if="editingIndex === index">
            <input v-model="editName" class="edit-input" />
            <input v-model="editDesc" class="edit-input" />
            <input v-model="editDate" type="date" class="edit-input" />
            <input v-model="editTime" type="time" class="edit-input" />
          </template>
          <template v-else>
            <strong>{{ obj.name }}</strong> - {{ obj.description }}
            <br />
            <small class="datetime">{{ obj.date }} {{ obj.time }}</small>
          </template>
        </div>
        <div class="actions">
          <template v-if="editingIndex === index">
            <button class="btn save" @click="saveEdit(index)">💾 儲存</button>
            <button class="btn cancel" @click="cancelEdit">❌ 取消</button>
          </template>
          <template v-else>
            <button class="btn edit" @click="startEdit(index)">✏️ 編輯</button>
            <button class="btn delete" @click="removeObject(index)">🗑 刪除</button>
          </template>
        </div>
      </li>
    </ul>

    <p v-if="objects.length === 0" class="empty">尚未新增任何任務</p>
  </div>
</template>

<script>
export default {
  data() {
    return {
      objects: JSON.parse(localStorage.getItem("objects")) || [],
      newName: "",
      newDesc: "",
      newDate: "",
      newTime: "",
      editingIndex: null,
      editName: "",
      editDesc: "",
      editDate: "",
      editTime: ""
    }
  },
  methods: {
    saveData() {
      localStorage.setItem("objects", JSON.stringify(this.objects))
    },
    addObject() {
      if (!this.newName.trim()) return alert("名稱不能為空")
      const obj = {
        id: Date.now(),
        name: this.newName,
        description: this.newDesc,
        date: this.newDate,
        time: this.newTime
      }
      this.objects.push(obj)
      this.saveData()
      this.newName = ""
      this.newDesc = ""
      this.newDate = ""
      this.newTime = ""
    },
    removeObject(index) {
      this.objects.splice(index, 1)
      this.saveData()
    },
    startEdit(index) {
      const obj = this.objects[index]
      this.editingIndex = index
      this.editName = obj.name
      this.editDesc = obj.description
      this.editDate = obj.date
      this.editTime = obj.time
    },
    saveEdit(index) {
      const obj = this.objects[index]
      obj.name = this.editName
      obj.description = this.editDesc
      obj.date = this.editDate
      obj.time = this.editTime
      this.editingIndex = null
      this.saveData()
    },
    cancelEdit() {
      this.editingIndex = null
    }
  }
}
</script>

<style scoped>
.list-card {
  background: linear-gradient(135deg, #89f7fe, #66a6ff);
  padding: 20px;
  border-radius: 16px;
  box-shadow: 0 6px 18px rgba(0,0,0,0.2);
  color: #333;
  width: 100%;
  max-width: 600px;
}

.title {
  text-align: center;
  font-size: 1.5rem;
  margin-bottom: 15px;
  color: #fff;
}

.form-row {
  display: flex;
  flex-wrap: wrap;
  gap: 10px;
  margin-bottom: 20px;
}

.input, .edit-input {
  flex: 1;
  padding: 8px 10px;
  border-radius: 10px;
  border: none;
  font-size: 0.95rem;
}

ul {
  list-style: none;
  padding: 0;
}

.item {
  background: #ffffffcc;
  margin-bottom: 10px;
  padding: 12px;
  border-radius: 12px;
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.actions {
  display: flex;
  gap: 8px;
}

.btn {
  border: none;
  border-radius: 20px;
  padding: 6px 12px;
  font-size: 0.9rem;
  font-weight: bold;
  cursor: pointer;
  transition: 0.3s;
}

/* 彩色按鈕 */
.btn.add { background: linear-gradient(135deg, #43e97b, #38f9d7); color: white; }
.btn.add:hover { background: linear-gradient(135deg, #11998e, #38ef7d); }

.btn.edit { background: linear-gradient(135deg, #f6d365, #fda085); color: white; }
.btn.edit:hover { background: linear-gradient(135deg, #ff9a9e, #fecfef); }

.btn.delete { background: linear-gradient(135deg, #ff758c, #ff7eb3); color: white; }
.btn.delete:hover { background: linear-gradient(135deg, #ff4e50, #f9d423); }

.btn.save { background: linear-gradient(135deg, #6a11cb, #2575fc); color: white; }
.btn.save:hover { background: linear-gradient(135deg, #2575fc, #6a11cb); }

.btn.cancel { background: linear-gradient(135deg, #ff9966, #ff5e62); color: white; }
.btn.cancel:hover { background: linear-gradient(135deg, #ff5e62, #ff9966); }

.empty {
  text-align: center;
  color: #fff;
  font-style: italic;
}

.datetime {
  color: #555;
  font-size: 0.8rem;
}
</style>



------------------------------------------------

tailwind.config.cjs


/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    "./index.html",
    "./src/**/*.{vue,js,ts}"
  ],
  theme: {
    extend: {},
  },
  plugins: [],
}


-------------------------------------------------------

postcss.config.cjs


module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  }
}

-------------------------------------------------------

src/main.js

import { createApp } from 'vue'
import App from './App.vue'
import './main.css'   // <-- 引入 Tailwind CSS

createApp(App).mount('#app')


-------------------------------------------------------

package.json

{
  "name": "vue-object-project",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "preview": "vite preview"
  },
  "dependencies": {
    "vue": "^3.5.21"
  },
  "devDependencies": {
    "@tailwindcss/postcss": "^4.1.13",
    "@vitejs/plugin-vue": "^6.0.1",
    "autoprefixer": "^10.4.21",
    "postcss": "^8.5.6",
    "tailwindcss": "^4.1.13",
    "vite": "npm:rolldown-vite@7.1.12"
  },
  "overrides": {
    "vite": "npm:rolldown-vite@7.1.12"
  }
}


-------------------------------------------------------


這個專案是 Vue 3 + Vite 架構，所以要打包輸出靜態網頁到一個資料夾，只要用 Vite 的 build 指令：

npm run build

執行後流程：

會在專案根目錄生成一個 dist/ 資料夾。

裡面包含 index.html、壓縮過的 JS、CSS 檔案。

這就是可以直接丟到網站伺服器（例如 Nginx、Apache、GitHub Pages）的檔案。

如果想在本地測試打包後的網站：

npm run preview


預設會開在 http://localhost:4173。

部署方式

一般網頁伺服器 (Apache / Nginx) → 把 dist/ 整包上傳到伺服器即可。

GitHub Pages → 可以用 gh-pages 套件部署，或直接丟 dist/ 到 gh-pages 分支。

Netlify / Vercel → 在建置設定輸入 npm run build，發佈資料夾設 dist。

-------------------------------------------------------

執行程式指令 

npm run dev

網址: https://subtle-axolotl-2e4d31.netlify.app/



